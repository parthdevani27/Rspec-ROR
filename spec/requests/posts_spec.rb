require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/posts", type: :request do
  current_user = User.first_or_create(email:'www@gmail.com' ,password:'123456' ,password_confirmation: '123456')
  
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      'id' => 1,
      'title' => 'testtesttest',
      'body'  => 'valid body',
      'user' => current_user
    }
  end

  let(:invalid_attributes) do 
    {
      'id' => 'a',
      'title' => '1',
      'body'  => '124',
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      post = Post.new(valid_attributes)
      post.user = current_user
      post.save
      get posts_url(post)
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      post = Post.new(valid_attributes)
      post.user = current_user
      post.save
      get post_url(post)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_post_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      post = Post.new(valid_attributes)
      post.user = current_user
      post.save
      get edit_post_url(post)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Post" do
        expect {
          post posts_url, params: { post: valid_attributes }
        }.to change(Post, :count).by(0)
      end

    end

    context "with invalid parameters" do
      it "does not create a new Post" do
        expect {
          post posts_url, params: { post: invalid_attributes }
        }.to change(Post, :count).by(0)
      end
        it "creates the requested post" do

        post posts_url, params: { post: {id:4,title:'sgsterdfere',body:'sksksj',user_id:1,views:0} }
        expect(response).to be_successful
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post posts_url, params: { post: invalid_attributes }
        expect(response).to_not be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do

    let(:new_attributes) do
      {
        'id' => 1,
        'title' => 'testtesttest2',
        'body'  => 'valid33',
        'user' => current_user
      }
    end
      it "updates the requested post" do
        post = Post.new(valid_attributes)
        post.user = current_user
        post.save
        patch post_url(post), params: { post: {id:post.id,title:'sgsterdfere',body:'sksksj',user_id:current_user.id,views:0}  }
        post.reload
        expect(response).to be_successful
      end

      it "redirects to the post" do
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: valid_attributes }
        post.reload
        expect(response).to redirect_to(post_url(post))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: invalid_attributes }
        expect(response).to_not be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested post" do
      post = Post.create! valid_attributes
      expect {
        delete post_url(post)
      }.to change(Post, :count).by(-1)
    end

    it "redirects to the posts list" do
      post = Post.create! valid_attributes
      delete post_url(post)
      expect(response).to redirect_to(posts_url)
    end
  end
end
