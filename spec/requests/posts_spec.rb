require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/posts", type: :request do
  current_user = User.first_or_create(email:'www@gmail.com' ,password:'123456' ,password_confirmation: '123456')
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      'id' => 1,
      'title' => 'testtesttest',
      'body'  => 'valid body',
      'user' => current_user
    }
  end

  let(:invalid_attributes) do 
    {
      'id' => 'a',
      'title' => nil,
      'body'  => '124',
    }
  end

  describe "GET /index" do
    it "renders a successful response" do
      get posts_path
      expect(response).to be_successful
    end
    it "include posts" do
      get posts_path
      expect(response.body).to include("posts")
    end
    it "renders the index template" do
      get posts_path
      expect(response).to be_successful
      expect(response).to render_template(:index)
    end
  end

  describe "GET /show" do
   include AuthHelper

    it "renders a successful response" do
      post = Post.create(valid_attributes)
      get post_url(post),headers: headers
      expect(response).to be_successful
      expect(response.body).to include post.title
      expect(response.body).to include post.id.to_s
      expect(response).to render_template(:show)
    end
  end

  describe "GET /new" do
    it "/new renders a successful response" do
      get new_post_url
      expect(response).to be_successful
    end
    it "render new page" do
      get new_post_url
      expect(response).to render_template(:new)
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      post = Post.create(valid_attributes)
      get edit_post_url(post)
      expect(response).to be_successful
    end
    it "render to edit page" do
      post = Post.create(valid_attributes)
      get edit_post_url(post)
      expect(response).to render_template(:edit)
    end
    it "include post" do
      post = Post.create(valid_attributes)
      get edit_post_url(post)
      expect(response.body).to include post.title
      expect(response.body).to include post.id.to_s
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Post" do
        expect {
          post posts_url, params: { post:valid_attributes}}.to change(Post, :count).by(1)
            expect(response).to have_http_status(302)
      end
    end
    context "with invalid parameters" do
      it "does not create a new Post" do
        expect {
          post posts_url, params: { post: invalid_attributes }
        }.to change(Post, :count).by(0)
        expect(response).to_not have_http_status(302)

      end
      it "render when invalid parameter" do
        post posts_url, params: { post: {"id"=>1,"title"=>"Di", "body"=>'sss', "user_id"=>current_user.email} }
        expect(response).to_not be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do

    let(:new_attributes) do
      {
        'id' => 1,
        'title' => 'testtesttest2',
        'body'  => 'valid33',
      }
    end
      it "updates the requested post" do
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: new_attributes  }
        post.reload
        expect(response).to have_http_status(302)
      end

      it "redirects to the post" do
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: valid_attributes }
        post.reload
        expect(response).to redirect_to(post_url(post))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response " do
        post = Post.create! valid_attributes
        patch post_url(post), params: { post: invalid_attributes }
        expect(response).to_not have_http_status(302)
        expect(response).to_not redirect_to(post_url(post))
      end
    end
  end

  describe "/destroy" do
    it "delete the requested post" do
      post = Post.create! valid_attributes
      expect {
        delete post_url(post)
      }.to change(Post, :count).by(-1)
    end

    it "redirect to the posts list page" do
      post = Post.create! valid_attributes
      delete post_url(post)
      expect(response).to redirect_to(posts_url)
    end
  end
end
